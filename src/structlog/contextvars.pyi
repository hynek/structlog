import contextvars

from collections.abc import Mapping
from contextlib import ContextDecorator
from types import FrameType
from typing import Any

from structlog.typing import BindableLogger, EventDict, WrappedLogger

STRUCTLOG_KEY_PREFIX: str
STRUCTLOG_KEY_PREFIX_LEN: int

_ASYNC_CALLING_STACK: contextvars.ContextVar[FrameType]

_CONTEXT_VARS: dict[str, contextvars.ContextVar[Any]]

def get_contextvars() -> dict[str, Any]: ...
def get_merged_contextvars(bound_logger: BindableLogger) -> dict[str, Any]: ...
def merge_contextvars(
    logger: WrappedLogger, method_name: str, event_dict: EventDict
) -> EventDict: ...
def clear_contextvars() -> None: ...
def bind_contextvars(**kw: Any) -> Mapping[str, contextvars.Token[Any]]: ...
def reset_contextvars(**kw: contextvars.Token[Any]) -> None: ...
def unbind_contextvars(*keys: str) -> None: ...
def bound_contextvars(**kw: Any) -> ContextDecorator: ...
