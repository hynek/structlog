---
name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  FORCE_COLOR: "1" # Make tools pretty.
  TOX_TESTENV_PASSENV: FORCE_COLOR
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"
  PYTHON_LATEST: "3.11"

  # For re-actors/checkout-python-sdist
  SETUPTOOLS_SCM_PRETEND_VERSION: "1.0"  # hard-code version for predictable sdist names
  sdist-artifact: python-package-distributions
  sdist-name: structlog-1.0.tar.gz

permissions:
  contents: read

jobs:
  build-sdist:
    name: ðŸ“¦ Build the source distribution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_LATEST }}
      - run: python -Im pip install build

      - run: python -Im build --sdist

      - uses: actions/upload-artifact@v3
        with:
          name: ${{ env.sdist-artifact }}
          # NOTE: Exact expected file names are specified here
          # NOTE: as a safety measure â€” if anything weird ends
          # NOTE: up being in this dir or not all dists will be
          # NOTE: produced, this will fail the workflow.
          path: dist/${{ env.sdist-name }}
          retention-days: 15

  tests:
    name: Tests on ${{ matrix.python-version }}
    needs: build-sdist
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"

    steps:
      - name: Get source code from pre-built sdist
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-name }}
          workflow-artifact-name: ${{ env.sdist-artifact }}

      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -Im pip install --upgrade wheel tox

      - run: python -Im tox run -f py$(echo ${{ matrix.python-version }} | tr -d .)

      - name: Upload coverage data
        uses: actions/upload-artifact@v3
        with:
          name: coverage-data
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    name: Combine & check coverage.
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - name: Get source code from pre-built sdist
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-name }}
          workflow-artifact-name: ${{ env.sdist-artifact }}

      - uses: actions/setup-python@v4
        with:
          # Use latest Python, so it understands all syntax.
          python-version: ${{env.PYTHON_LATEST}}

      - run: python -Im pip install --upgrade coverage[toml]

      - uses: actions/download-artifact@v3
        with:
          name: coverage-data

      - name: Combine coverage & fail if it's <100%.
        run: |
          python -Im coverage combine
          python -Im coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -Im coverage report | sed 's/^/    /' >> $GITHUB_STEP_SUMMARY

          # Report again and fail if under 100%.
          python -Im coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v3
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  mypy:
    name: Mypy on ${{ matrix.python-version }}
    needs: build-sdist
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version:
          # mypy on 3.7 fails but there's nothing we can do about it
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"

    steps:
      - name: Get source code from pre-built sdist
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-name }}
          workflow-artifact-name: ${{ env.sdist-artifact }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - run: python -Im pip install --upgrade wheel tox

      - run: python -Im tox -e mypy

  docs:
    name: Build docs & run doctests
    needs: build-sdist
    runs-on: ubuntu-latest
    steps:
      - name: Get source code from pre-built sdist
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-name }}
          workflow-artifact-name: ${{ env.sdist-artifact }}
      - uses: actions/setup-python@v4
        with:
          # Keep in sync with tox.ini/docs & readthedocs.yaml
          python-version: "3.11"
      - run: python -Im pip install --upgrade wheel tox

      - run: python -Im tox -e docs

  install-dev:
    name: Verify dev env
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - run: python -Im pip install -e .[dev]
      - run: python -Ic 'import structlog; print(structlog.__version__)'

  # Ensure everything required is passing for branch protection.
  required-checks-pass:
    if: always()

    needs:
      - coverage
      - docs
      - install-dev

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}


  colors:
    name: Visual check for color settings using env variables
    needs: build-sdist
    runs-on: ubuntu-latest

    steps:
      - name: Get source code from pre-built sdist
        uses: re-actors/checkout-python-sdist@release/v1
        with:
          source-tarball-name: ${{ env.sdist-name }}
          workflow-artifact-name: ${{ env.sdist-artifact }}
      - uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_LATEST}}
      - run: python -Im pip install tox wheel

      - run: tox -f color
