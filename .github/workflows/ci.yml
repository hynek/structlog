---
name: CI

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

env:
  FORCE_COLOR: "1" # Make tools pretty.
  PIP_DISABLE_PIP_VERSION_CHECK: "1"
  PIP_NO_PYTHON_VERSION_WARNING: "1"

permissions: {}

jobs:
  build-package:
    name: Build & verify package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: hynek/build-and-inspect-python-package@v2
        id: baipp

    outputs:
      python-versions: ${{ steps.baipp.outputs.supported_python_classifiers_json_array }}

  tests:
    name: Tests & API Mypy on ${{ matrix.python-version }}
    needs: build-package
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.build-package.outputs.python-versions) }}

    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist
      - run: tar xf dist/*.tar.gz --strip-components=1
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          allow-prereleases: true
          cache: pip
      - run: python -Im pip install tox-uv

      - run: python -Im tox run --installpkg dist/*.whl -f py$(echo ${{ matrix.python-version }} | tr -d .)

      - name: Upload coverage data
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data-${{ matrix.python-version }}
          path: .coverage.*
          if-no-files-found: ignore

  coverage:
    name: Combine & check coverage
    needs: tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version-default
          cache: pip
      - run: python -Im pip install --upgrade coverage[toml]
      - uses: actions/download-artifact@v4
        with:
          pattern: coverage-data-*
          merge-multiple: true

      - name: Combine coverage & fail if it's <100%.
        run: |
          python -Im coverage combine
          python -Im coverage html --skip-covered --skip-empty

          # Report and write to summary.
          python -Im coverage report --format=markdown >> $GITHUB_STEP_SUMMARY

          # Report again and fail if under 100%.
          python -Im coverage report --fail-under=100

      - name: Upload HTML report if check failed.
        uses: actions/upload-artifact@v4
        with:
          name: html-report
          path: htmlcov
        if: ${{ failure() }}

  mypy-pkg:
    name: Type-check package
    needs: build-package
    runs-on: ubuntu-latest

    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist
      - run: tar xf dist/*.tar.gz --strip-components=1
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version-default
          allow-prereleases: true
          cache: pip
      - run: python -Im pip install tox-uv

      - run: python -Im tox run --installpkg dist/*.whl -e mypy-pkg

  pyright:
    name: Pyright
    runs-on: ubuntu-latest
    needs: build-package

    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist
      - run: tar xf dist/*.tar.gz --strip-components=1
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version-default
          allow-prereleases: true
          cache: pip
      - run: python -Im pip install tox-uv

      - run: python -Im tox run --installpkg dist/*.whl -e pyright

  docs:
    name: Build docs & run doctests
    needs: build-package
    runs-on: ubuntu-latest
    steps:
      - name: Download pre-built packages
        uses: actions/download-artifact@v4
        with:
          name: Packages
          path: dist
      - run: tar xf dist/*.tar.gz --strip-components=1
      - uses: actions/setup-python@v5
        with:
          # Keep in sync with tox.ini/docs & .readthedocs.yaml
          python-version: "3.12"
          cache: pip
      - run: python -Im pip install tox-uv

      - run: python -Im tox run -e docs

  install-dev:
    name: Verify dev env
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version-default
          cache: pip

      - run: python -Im pip install uv
      - run: uv venv
      - run: uv pip install -e .[dev]

      - run: .venv/bin/python -Ic 'import structlog; print(structlog.__version__)'
        if: runner.os != 'Windows'
      - run: .\.venv\Scripts\python.exe -Ic 'import structlog; print(structlog.__version__)'
        if: runner.os == 'Windows'

  required-checks-pass:
    name: Ensure everything required is passing for branch protection
    if: always()

    needs:
      - coverage
      - docs
      - install-dev
      - mypy-pkg
      - pyright

    runs-on: ubuntu-latest

    steps:
      - name: Decide whether the needed jobs succeeded or failed
        uses: re-actors/alls-green@release/v1
        with:
          jobs: ${{ toJSON(needs) }}

  colors:
    name: Visual check for color settings using env variables
    needs: build-package
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version-file: .python-version-default
          cache: pip
      # tox 4.12.0 started passing FORCE_COLOR and NO_COLOR by default.
      - run: python -Im pip install 'tox>=4.12.0' tox-uv

      - run: python -Im tox run -f color
